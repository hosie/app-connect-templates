$integration: 'http://ibm.com/appconnect/integration/v2/integrationFile'
integration:
  type: api
  trigger-interfaces:
    trigger-interface-1:
      triggers:
        createLeads:
          assembly:
            $ref: '#/integration/assemblies/assembly-1'
          input-context:
            data: leads
          output-context:
            data: leads
      options:
        resources:
          - business-object: leads
            model:
              $ref: '#/models/leads'
            triggers:
              create: createLeads
      type: api-trigger
  action-interfaces:
    action-interface-2:
      type: api-action
      business-object: Lead
      connector-type: salesforce
      actions:
        UPSERTWITHWHERE: {}
    action-interface-3:
      type: api-action
      business-object: Lead
      connector-type: salesforce
      actions:
        UPSERTWITHWHERE: {}
    action-interface-4:
      type: api-action
      business-object: File
      connector-type: box
      actions:
        DOWNLOADFILE: {}
  assemblies:
    assembly-1:
      assembly:
        execute:
          - custom-action:
              name: Box Retrieve file content
              target:
                $ref: '#/integration/action-interfaces/action-interface-4'
              action: DOWNLOADFILE
              map:
                mappings:
                  - fileType:
                      template: Text
                  - id:
                      template: '{{$split($Request.file_url, "/")[-1]}}'
                $map: 'http://ibm.com/appconnect/map/v1'
                input:
                  - variable: Request
                    $ref: '#/trigger/payload'
          - parse:
              name: CSV Parser Parse
              parse-format: csv
              source:
                template: '{{$BoxRetrievefilecontent.content}}'
                input:
                  - variable: Request
                    $ref: '#/trigger/payload'
                  - variable: BoxRetrievefilecontent
                    $ref: '#/node-output/Box Retrieve file content/response/payload'
              sample-data: 'First Name,Last Name,Email,Company,Event'
              output-schema:
                type: array
                $schema: 'http://json-schema.org/draft-04/schema#'
                items:
                  type: object
                  required:
                    - First Name
                    - Last Name
                    - Email
                    - Company
                    - Event
                  properties:
                    First Name:
                      type: string
                      minLength: 1
                    Last Name:
                      type: string
                      minLength: 1
                    Email:
                      type: string
                      minLength: 1
                    Company:
                      type: string
                      minLength: 1
                    Event:
                      type: string
                      minLength: 1
                title: Parsed CSV
              options:
                csv-header: true
          - for-each:
              name: For each
              assembly:
                $ref: '#/integration/assemblies/assembly-2'
              source:
                expression: '$CSVParserParse '
                input:
                  - variable: Request
                    $ref: '#/trigger/payload'
                  - variable: BoxRetrievefile
                    $ref: '#/node-output/Box Retrieve file/response/payload'
                  - variable: BoxRetrievefileMetadata
                    $ref: '#/node-output/Box Retrieve file/response'
                  - variable: CSVParserParse
                    $ref: '#/node-output/CSV Parser Parse/response/payload'
              mode: parallel
              continue-on-error: true
              map:
                $map: 'http://ibm.com/appconnect/map/v1'
                input:
                  - variable: Foreachitem
                    $ref: '#/block/For each/current-item'
                  - variable: Request
                    $ref: '#/trigger/payload'
                  - variable: BoxRetrievefile
                    $ref: '#/node-output/Box Retrieve file/response/payload'
                  - variable: BoxRetrievefileMetadata
                    $ref: '#/node-output/Box Retrieve file/response'
                  - variable: CSVParserParse
                    $ref: '#/node-output/CSV Parser Parse/response/payload'
                customSchemas: {}
                mappings: []
              display-name: lead
          - response:
              name: response-1
              reply-maps:
                - title: leads successfully created
                  status-code: '201'
                  map:
                    $map: 'http://ibm.com/appconnect/map/v1'
                    input:
                      - variable: Request
                        $ref: '#/trigger/payload'
                      - variable: BoxRetrievefile
                        $ref: '#/node-output/Box Retrieve file/response/payload'
                      - variable: BoxRetrievefileMetadata
                        $ref: '#/node-output/Box Retrieve file/response'
                      - variable: CSVParserParse
                        $ref: '#/node-output/CSV Parser Parse/response/payload'
                      - variable: Foreach
                        $ref: '#/node-output/For each/response/payload'
                    mappings:
                      - file_url:
                          template: '{{$Request.file_url}}'
                  input:
                    - variable: Request
                      $ref: '#/trigger/payload'
                    - variable: BoxRetrievefile
                      $ref: '#/node-output/Box Retrieve file/response/payload'
                    - variable: BoxRetrievefileMetadata
                      $ref: '#/node-output/Box Retrieve file/response'
                    - variable: CSVParserParse
                      $ref: '#/node-output/CSV Parser Parse/response/payload'
                    - variable: Foreach
                      $ref: '#/node-output/For each/response/payload'
    assembly-2:
      assembly:
        execute:
          - if:
              name: If 2
              input:
                - variable: Foreachitem
                  $ref: '#/block/For each/current-item'
                - variable: Request
                  $ref: '#/trigger/payload'
                - variable: BoxRetrievefilecontent
                  $ref: '#/node-output/Box Retrieve file content/response/payload'
                - variable: CSVParserParse
                  $ref: '#/node-output/CSV Parser Parse/response/payload'
              branch:
                - condition:
                    '{{$Request.event_name}}':
                      neq: ''
                  execute:
                    - if:
                        name: If
                        input:
                          - variable: Foreachitem
                            $ref: '#/block/For each/current-item'
                          - variable: Request
                            $ref: '#/trigger/payload'
                          - variable: BoxRetrievefile
                            $ref: '#/node-output/Box Retrieve file/response/payload'
                          - variable: BoxRetrievefileMetadata
                            $ref: '#/node-output/Box Retrieve file/response'
                          - variable: CSVParserParse
                            $ref: '#/node-output/CSV Parser Parse/response/payload'
                        branch:
                          - condition:
                              '{{$Foreachitem.Event}}': '{{$Request.event_name}}'
                            execute:
                              - upsert-action:
                                  name: Salesforce Update or create lead
                                  target:
                                    $ref: >-
                                      #/integration/action-interfaces/action-interface-2
                                  map:
                                    mappings:
                                      - Company:
                                          template: '{{$Foreachitem.Company}}'
                                      - FirstName:
                                          template: '{{$Foreachitem."First Name"}}'
                                      - LastName:
                                          template: '{{$Foreachitem."Last Name"}}'
                                      - LeadSource:
                                          template: 'From event: {{$Foreachitem.Event}}'
                                    $map: 'http://ibm.com/appconnect/map/v1'
                                    input:
                                      - variable: Foreachitem
                                        $ref: '#/block/For each/current-item'
                                      - variable: Request
                                        $ref: '#/trigger/payload'
                                      - variable: BoxRetrievefilecontent
                                        $ref: >-
                                          #/node-output/Box Retrieve file
                                          content/response/payload
                                      - variable: CSVParserParse
                                        $ref: >-
                                          #/node-output/CSV Parser
                                          Parse/response/payload
                                  filter:
                                    where:
                                      Email: '{{$Foreachitem.Email}}'
                                    input:
                                      - variable: Foreachitem
                                        $ref: '#/block/For each/current-item'
                                      - variable: Request
                                        $ref: '#/trigger/payload'
                                      - variable: BoxRetrievefilecontent
                                        $ref: >-
                                          #/node-output/Box Retrieve file
                                          content/response/payload
                                      - variable: CSVParserParse
                                        $ref: >-
                                          #/node-output/CSV Parser
                                          Parse/response/payload
                        else:
                          execute: []
                        output-schema: {}
              else:
                execute:
                  - upsert-action:
                      name: Salesforce Update or create lead 2
                      target:
                        $ref: '#/integration/action-interfaces/action-interface-3'
                      map:
                        mappings:
                          - Company:
                              template: '{{$Foreachitem.Company}}'
                          - FirstName:
                              template: '{{$Foreachitem."First Name"}}'
                          - LastName:
                              template: '{{$Foreachitem."Last Name"}}'
                          - LeadSource:
                              template: 'From event: {{$Foreachitem.Event}}'
                        $map: 'http://ibm.com/appconnect/map/v1'
                        input:
                          - variable: Foreachitem
                            $ref: '#/block/For each/current-item'
                          - variable: Request
                            $ref: '#/trigger/payload'
                          - variable: BoxRetrievefilecontent
                            $ref: >-
                              #/node-output/Box Retrieve file
                              content/response/payload
                          - variable: CSVParserParse
                            $ref: '#/node-output/CSV Parser Parse/response/payload'
                      filter:
                        where:
                          Email: '{{$Foreachitem.Email}}'
                        input:
                          - variable: Foreachitem
                            $ref: '#/block/For each/current-item'
                          - variable: Request
                            $ref: '#/trigger/payload'
                          - variable: BoxRetrievefilecontent
                            $ref: >-
                              #/node-output/Box Retrieve file
                              content/response/payload
                          - variable: CSVParserParse
                            $ref: '#/node-output/CSV Parser Parse/response/payload'
              output-schema: {}
  name: API to create leads in Salesforce using a csv file from Box
  description: >-
    This API takes a URL to a Box document, and an optional event name. Using
    that information it retrieves the document, parses it to find the new leads
    generated and creates or updates those leads in Salesforce.
  todo: >
    To refer to these instructions while editing the flow, open [the github
    page](https://github.com/ot4i/app-connect-templates/blob/master/resources/markdown/API%20to%20create%20leads%20in%20Salesforce%20using%20a%20csv%20file%20from%20Box_instructions.md)
    (opens in a new window).


    This API takes a URL to a CSV file in Box, and an optional event name. It
    uses that information to retrieve the file's contents (CSV data), parse that
    CSV data, and create a new lead in Salesforce for every line that matches
    the event name given when calling the API. If you didn't give an event name,
    leads for all the lines from the CSV are created or updated in Salesforce. 
    The email address is used to determine if the lead already exists in
    Salesforce or not. The flow does not change the original file.


    Before you use this flow, you must have a CSV file in Box with the following
    items in the header row, in this order:

    * **First Name** 

    * **Last Name**

    * **Email Address** (This will be used to work out if this user already
    exists in Salesforce, or not.)

    * **Company**

    * **Event** (When you call the API, this is the column that will be used to
    check if the event name matches the one you've specified.)


    The first line in your CSV file should look like this:

    `First Name,Last Name,Email,Company,Event`


    ## Using the template


    1. Click **Create flow** to start using the template.

    1. Click **Operations**, then **Edit flow** for the _Create leads_
    operation.

    1. Click on the **Box** node, and if you're not already connected, connect
    to your [Box
    account](https://developer.ibm.com/integration/docs/app-connect/how-to-guides-for-apps/use-ibm-app-connect-box/).

    1. Click on the **Salesforce node**, and if you're not already connected,
    connect to your [Salesforce
    account](https://developer.ibm.com/integration/docs/app-connect/how-to-guides-for-apps/use-ibm-app-connect-salesforce/).

    1. Click **Done**.

    1. To start the flow, in the banner open the options menu [&#8942;] then
    click **Start flow**.


    Want to see if working? Click **Manage** in the API flow, then follow the
    instructions on getting started. Once you're in the API portal, use the Try
    it link and then **Generate** some test data. Replace the value for
    `file_url` with the URL for the CSV file you want to use. Replace the value
    for `event_name` with the event name you want to match in your file, and
    then click **Call operation**.
models:
  leads:
    name: leads
    properties:
      file_url:
        required: false
        id: true
        type: string
      event_name:
        required: false
        id: false
        type: string
    plural: leads
    description: ' '
    operations:
      create: '#/integration/assemblies/assembly-1'
